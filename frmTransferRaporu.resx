<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="simpleButton21.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>